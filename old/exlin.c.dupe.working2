#include <stdio.h>  //printf
#include <stdlib.h> //malloc
#include <string.h> //memset
#include <time.h>   //timing

//#define SORT_SZ sizeof(sort) / sizeof(long long)
#define SORT_SZ 1000000000

clock_t t;//= clock();
double time_taken;

void set_timer(){
    t = clock();// - t;
}

void timer(){
    time_taken = ((double)t)/CLOCKS_PER_SEC;

    printf("took %f seconds to ", time_taken);
    t = clock() - t;
}

int main(){
    unsigned long long GOAL_SZ, cntDupe = 0;
    long long lo = 0, hi = 0, cnt = 0, *goal,
    *sort;//sort [SORT_SZ] = { 0

/*

the sad thing about this is
it becomes harder to edit files with a million+ numbers than execute >_< lol
program runs, with dupes
biggest problem is the difference in lo/hi allocating large areas of memory

460k
took 0.001679 seconds to execute

450k straight
////took 0.001659 seconds to execute
dupes
took 0.000724 seconds to sort

250k straight
////took 0.001172 seconds to execute
dupes
took 0.000972 seconds to sort


1mil straight
////took 0.003420 seconds to execute
dupes
took 0.001323 seconds to sort

*/

//3 #s, billion apart
//100, 0, -100000

//1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,

//SORT_SZ = 22525
//GOAL_SZ = 2001
//0.000431
    //}; //sort

    sort = malloc(SORT_SZ * sizeof(long long) );

    for(cnt = 0; cnt < SORT_SZ; cnt++){
        sort[cnt] = cnt;
    }//fake gen - 2mil bombs out on stack

    set_timer();

    for(cnt = 0; cnt < SORT_SZ; cnt++) {
        if( sort[cnt] > hi ){
            hi = sort[cnt];
        }
        else if( sort[cnt] < lo ){
            lo = sort[cnt];
        }
    }

    GOAL_SZ = hi - lo + 1;
    //can allocate way more than needed, [2] with 0 and 9tril ... x-x

    goal = malloc(GOAL_SZ * sizeof(long long) );
    memset(goal, 0x0, GOAL_SZ * sizeof(long long) );
    short *dupes = malloc(GOAL_SZ * sizeof(short) );//times_duped - could make int/short? 4bil dupes unlikely
    memset(dupes, 0x0, GOAL_SZ * sizeof(short) );
    //long long *dupes = malloc(GOAL_SZ * sizeof(long long) );//times_duped - could make int/short? 4bil dupes unlikely
    //memset(dupes, 0x0, GOAL_SZ * sizeof(long long) );
    //^ takes much more time to malloc than 'sort', especially with 2x size

    printf("SORT_SZ = %lld\nGOAL_SZ = %lld\n\thi = %lld\n\tlo = %lld\n", SORT_SZ, GOAL_SZ, hi, lo);
    printf("%llu total bytes for goal\n", GOAL_SZ * sizeof(long long) );

    timer();
    printf("malloc\nsorting numbers into goal\n");

    for(cnt = 0; cnt < SORT_SZ; cnt++) {
        //printf("trying to set goal [ %lld + %lld ] = %lld\n", sort[cnt], lo, sort[cnt]-lo);
        dupes[ sort[cnt] - lo ] += 1; //printing
        goal[ sort[cnt] - lo ] = sort[cnt];
    }

    timer(); printf("sort");

    printf("\nprinting sort\n");

//    for(cnt = 0; cnt < GOAL_SZ; cnt++)
//        for(cntDupe = 0; cntDupe < dupes[cnt]; cntDupe++)
//            printf("%lld, ", goal[cnt]);

    timer(); printf("execute \n", time_taken);

    free(goal);
    free(dupes);
    free(sort);

    return 0;

}

